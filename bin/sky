#!/usr/bin/env ruby

$:.unshift(File.join(File.dirname(File.expand_path(__FILE__)), '..', 'lib'))

require 'rubygems'
require 'skydb'
require 'skydb/import'
require 'commander/import'

program :name, 'Sky'
program :version, SkyDB::VERSION
program :description, 'A multi-purpose utilty for the Sky database.'

SkyDB.debug = true


################################################################################
# Import
################################################################################

command :import do |c|
  c.syntax = 'sky import FILE'
  c.description = 'Imports data from a text file into a Sky table.'
  c.option('--processes NUM', 'The number of processes to use.')
  c.option('--table STRING', 'The name of the table to import to.')
  c.option('--format STRING', 'The YAML format file to import with.')
  c.option('--file-type STRING', 'The type of file being imported (tsv,json,csv,apache_log).')
  c.option('--headers STRING', 'A comma-delimited list of headers to use.')
  c.option('--append', 'Appends to an existing database if one exists.')
  c.option('--overwrite', 'Overwrites an existing database if one exists.')
  c.when_called do|args, options|
    abort("You cannot specify --append and --overwrite at the same time.") if options.append && options.overwrite

    # Check if the server is running.
    if !SkyDB.ping
      puts "Sky is not currently running on #{SkyDB.client.host}:#{SkyDB.client.port}."
      exit(1)
    end

    # Setup importer.
    importer = SkyDB::Import::Importer.new()
    importer.table_name = options.table || ask("Table: ")
    importer.headers = options.headers.nil? ? nil : options.headers.split(/,/)
    importer.file_type = options.file_type.nil? ? nil : options.file_type.to_sym
    importer.processes = options.processes.nil? ? 1 : options.processes.to_i
    
    # Load transform files by name.
    formats = options.format || ask("Format: ")
    formats.split(',').each do |format|
      begin
        importer.load_transform_file(format)
      rescue SkyDB::Import::Importer::TransformNotFound => e
        puts "ERROR: #{e.message}\n\n"
        exit(1)
      end
    end
    
    # Check if table exists on server already.
    table = SkyDB.get_table(importer.table_name)

    # If table does not exists, then ask if it should be created.
    if table.nil?
      print "'#{importer.table_name}' does not exist. Create it? [Yn] "
      c = STDIN.gets.chomp.upcase
      exit(0) unless  c == '' || c[0] == 'Y'
      SkyDB.create_table(SkyDB::Table.new(importer.table_name))
    
    # If it does exist, ask if the import should append.
    else
      if !options.append
        c = nil
        if options.overwrite
          c = 'O'
        else
          print "'#{importer.table_name}' already exists. Append or overwrite? [Ao] "
          c = STDIN.gets.chomp.upcase[0]
        end
        
        if c == 'O'
          SkyDB.delete_table(SkyDB::Table.new(importer.table_name))
          SkyDB.create_table(SkyDB::Table.new(importer.table_name))
        end
      end
    end
    
    # Import!
    importer.import(args)
  end
end
